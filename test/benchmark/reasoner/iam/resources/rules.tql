# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

define

rule attribute-parent-company:
    when {
        (company: $c, member: $t) isa company-membership;
        $c has name $c-name;
        $pc isa parent-company-name;
        $c-name = $pc;
    } then {
        $t has $pc;
    };

rule automatic-member-collection:
    when {
        $c isa resource-collection;
        (member: $c) isa collection-membership;
    } then {
        $c has root-collection false;
    };

rule automatic-root-collection:
    when {
        $c isa resource-collection;
        not {
            $c has root-collection false;
        };
    } then {
        $c has root-collection true;
    };

# memberships
inferred-group-membership sub group-membership;
inferred-set-membership sub set-membership;
inferred-collection-membership sub collection-membership;

rule optimised-transitive-membership-groups:
when {
        (group: $p, member: $t) isa! group-membership;
        (group: $t, member: $m) isa group-membership;
} then {
        (group: $p, member: $m) isa  inferred-group-membership;
};

rule optimised-transitive-membership-sets:
when {
        (set: $p, member: $t) isa! set-membership;
        (set: $t, member: $m) isa set-membership;
} then {
        (set: $p, member: $m) isa inferred-set-membership;
};

rule optimised-transitive-membership-collections:
when {
        (collection: $p, member: $t) isa! collection-membership;
        (collection: $t, member: $m) isa collection-membership;
} then {
        (collection: $p, member: $m) isa inferred-collection-membership;
};

# permissions
rule unified-permission-inheritance:
when {
    $access (object: $object, action: $action) isa access;
    $subject isa subject;

    {(group: $granting-subject, member: $subject) isa group-membership;}  or { $granting-subject is $subject; };
    {(set: $granting-action, member: $action) isa set-membership;} or { $granting-action is $action; };
    {(collection: $granting-object, member: $object) isa collection-membership;} or { $granting-object is $object; };

    $granting-access (object: $granting-object, action: $granting-action) isa access;
    (subject: $granting-subject, access: $granting-access) isa direct-permission;
} then {
    (subject: $subject, access: $access) isa inherited-permission;
};

# violations
rule segregation-violation-detection:
    when {
        $po(action: $a1, action: $a2) isa segregation-policy;
        $ac1(object: $o, action: $a1) isa access;
        $ac2(object: $o, action: $a2) isa access;
        $p1(subject: $s, access: $ac1) isa permission;
        $p2(subject: $s, access: $ac2) isa permission;
    } then {
        (subject: $s, object: $o, policy: $po) isa segregation-violation;
    };

rule permission-maximisation-violation-detection:
    when {
        $p-d(subject: $s, access: $ac) isa direct-permission;
        $p-i(subject: $s, access: $ac) isa inherited-permission;
    } then {
        (permission: $p-d, permission: $p-i) isa permission-maximisation-violation;
    };

rule automatic-permission-invalidity:
    when {
        $po(action: $a1, action: $a2) isa segregation-policy;
        $ac1(object: $o, action: $a1) isa access;
        $ac2(object: $o, action: $a2) isa access;
        $p1(subject: $s, access: $ac1) isa permission;
        $p2(subject: $s, access: $ac2) isa permission;
    } then {
        $p1 has validity false;
    };

rule automatic-permission-validity:
    when {
        $p isa permission;
        not {
            $p has validity false;
        };
    } then {
        $p has validity true;
    };

## Rule: ALlows access to be planned separate from the rest of the retrievable - speeding up certain cases.
#rule dummy-access:
#when {
#  $o isa object, has id "__dummy__";
#  $a isa action, has id "__dummy__";
#} then {
#   (object: $o, action: $a) isa access;
#};
